{"version":3,"sources":["components/imgbox.js","App.js","reportWebVitals.js","index.js"],"names":["ImgWithId","props","history","useHistory","className","src","ilink","onClick","data","res","URLSearchParams","location","search","set","id","push","toString","go","handleClick","alt","ImgBox","state","dtype","opacity","conf","atype","query","key","fallback","get","queryUrl","this","fetch","then","json","setState","e","target","value","ipath","image_url","annotation","annotation2","face","filter","val","prob","map","i","x","y","width","height","stroke","strokeWidth","fill","inst","style","font","class","lvic","kpnt","score","cx","cy","r","kcnt","score0","score1","x1","x0","y1","y0","x2","y2","nn_recs","nn","nn_thumb","rr_recs","rr","rr_thumb","pano","backgroundColor","color","class_name","Math","round","c_name","collection","c_link","href","rel","viewBox","title","sort_date","url","filename","type","min","max","step","onChange","handleOpacityChange","bind","handleConfChange","handleSelectDataType","React","Component","ImageViewer","App","basename","process","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca510543.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  useHistory\n} from \"react-router-dom\";\n\nimport './imgbox.css';\n\nfunction queryUrl(query, key, fallback = null) {\n  let res = (new URLSearchParams(query)).get(key);\n  return res === null ? fallback : res;\n}\n\nfunction ImgWithId(props) {\n  let history = useHistory();\n  function handleClick(data) {\n    let res = new URLSearchParams(history.location.search);\n    res.set(\"id\", props.id);\n\n    history.push({\n        \"pathname\": \"/\",\n        \"search\": \"?\" + res.toString()\n    });\n    history.go(0);\n  }\n\n  return (\n      <img className='thumb' src={props.ilink} onClick={() => handleClick()} alt=\"nav\"/>\n  );\n}\n\nclass ImgBox extends React.Component {\n\n  constructor(props) {\n     super(props);\n     this.state = {\n       data: null,\n       dtype: \"none\",\n       opacity: 80,\n       conf: 50\n     }\n   }\n\n   componentDidMount() {\n     let atype = queryUrl(this.props.location.search, \"id\", \"2017877547\");\n\n     // for local dev => /addi_project/06_interactive_viz/build/json/\n     // for build ver => ./json/\n     fetch(\"./json/\" + atype + \".json\").then(res => {\n       return res.json()\n     }).then(res => {\n       this.setState({\n         data: res\n       });\n     })\n   }\n\n   handleSelectDataType(dtype) {\n     this.setState({\n       dtype: dtype,\n     });\n   }\n\n   handleOpacityChange(e) {\n      this.setState({\n        opacity: e.target.value\n      });\n    }\n\n    handleConfChange(e) {\n       this.setState({\n         conf: e.target.value\n       });\n     }\n\n    render() {\n      if (!this.state.data) {\n        return <span></span>\n      }\n\n      let ipath = this.state.data.image_url;\n\n      var annotation = null;\n      var annotation2 = null;\n\n      if (this.state.dtype === \"face\")\n      {\n        annotation = this.state.data.face.filter(\n          val => (100 * val.prob) > this.state.conf\n        ).map( (val, i) => {\n          return(\n            <g key={i}>\n              <rect\n                x={val.x}\n                y = {val.y}\n                width = {val.width}\n                height = {val.height}\n                stroke=\"#d79921\"\n                strokeWidth=\"4\"\n                fill=\"none\"\n                />\n            </g>\n          )\n        });\n      } else if (this.state.dtype === \"inst\") {\n        annotation = this.state.data.inst.filter(\n          val => (100 * val.prob) > this.state.conf\n        ).map( (val, i) => {\n          return(\n            <g key={i}>\n              <rect\n                x={val.x}\n                y = {val.y}\n                width = {val.width}\n                height = {val.height}\n                stroke=\"#d79921\"\n                strokeWidth=\"4\"\n                fill=\"none\"\n                />\n              <text\n                x={val.x}\n                y={val.y - 5}\n                style={{font: \"18px sans-serif\", fill: \"#d79921\"}}>\n                {val.class}\n              </text>\n            </g>\n          )\n        });\n    } else if (this.state.dtype === \"lvic\") {\n      annotation = this.state.data.lvic.filter(\n        val => (100 * val.prob) > this.state.conf\n      ).map( (val, i) => {\n        return(\n          <g key={i}>\n            <rect\n              x={val.x}\n              y = {val.y}\n              width = {val.width}\n              height = {val.height}\n              stroke=\"#d79921\"\n              strokeWidth=\"4\"\n              fill=\"none\"\n              />\n            <text\n              x={val.x}\n              y={val.y - 5}\n              style={{font: \"18px sans-serif\", fill: \"#d79921\"}}>\n              {val.class}\n            </text>\n          </g>\n        )\n      });\n    } else if (this.state.dtype === \"kpnt\") {\n      annotation = this.state.data.kpnt.filter(\n        val => (100 * val.score) > this.state.conf\n      ).map( (val, i) => {\n        return(\n          <g key={i}>\n            <circle cx={val.x} cy={val.y} r=\"5\" fill=\"#d79921\"/>\n          </g>\n        )\n      });\n      annotation2 = this.state.data.kcnt.filter(\n        val => ((100 * val.score0) > this.state.conf) & ((100 * val.score1) > this.state.conf)\n      ).map( (val, i) => {\n        return(\n          <g key={i}>\n            <line x1={val.x0} y1={val.y0} x2={val.x1} y2={val.y1} stroke=\"#d79921\"/>\n          </g>\n        )\n      });\n    }\n\n    let nn_recs = this.state.data.nn.map( (val, i) => {\n      return(\n        <div key ={i} className='thumbcon'><ImgWithId id={val} ilink={this.state.data.nn_thumb[i]}/></div>\n      )\n    });\n\n    let rr_recs = this.state.data.rr.map( (val, i) => {\n      return(\n        <div key ={i} className='thumbcon'><ImgWithId id={val} ilink={this.state.data.rr_thumb[i]}/></div>\n      )\n    });\n\n    let pano = this.state.data.pano.map( (val, i) => {\n      return(\n        <div\n          key={i}\n          className=\"pano-bar-size\"\n          ><div\n            className=\"pano-bar-inner\"\n            style={{width: val.value / 1 + \"%\", backgroundColor: val.color}}>\n            </div>\n          <span className='pano-bar-text'>\n            {val.class_name + \" (\" + Math.round(val.value) + \"%)\"}\n          </span>\n        </div>\n      )\n    });\n\n    let c_name = this.state.data.collection === \"fsac\" ? \"FSA-OWI Color Images\" : \"George Grantham Bain Collection\";\n    let c_link = this.state.data.collection === \"fsac\" ? \"https://www.loc.gov/pictures/collection/fsac/\" : \"https://www.loc.gov/pictures/collection/ggbain/\";\n\n    return (\n      <div className=\"wrapper\">\n      <div className=\"mbox\">\n        <div className=\"mboxdata\">\n          <p className=\"mboxtitle\"><b>Access & Discovery of Documentary Images (ADDI) Visualization</b></p>\n          <p className=\"mboxabout\"><b>By Taylor Arnold and Lauren Tilton for the Library of Congress</b></p>\n          <p className=\"mboxabout\">This interactive vizaliation is part of the ADDI project, which was designed to\n          adapt and apply computer vision algorithms to aid in the discovery and use of digital collections,\n          specifically documentary photography collections held by the Library of Congress.</p>\n          <p className=\"mboxabout\">For more information, see the project's <a href=\"https://github.com/statsmaths/addi_project\" target=\"_blank\" rel=\"noopener noreferrer\">main page</a>.</p>\n        </div>\n      </div>\n      <div className=\"ibox\">\n        <div className=\"ibox-inner\">\n          <svg viewBox={\"0 0 \" + this.state.data.width + \" \" + this.state.data.height}>\n            <image x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" href={ipath}/>\n            <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"black\" opacity={(100 - this.state.opacity) + \"%\"} stroke=\"#928374\" strokeWidth=\"4\"/>\n            {annotation} {annotation2}\n          </svg>\n        </div>\n      </div>\n      <div className=\"tbox\">\n        <div className=\"tbox-inner\">\n            <div className=\"mdata\">\n              <span><b><u>ARCHIVAL DATA</u></b>\n                <div className=\"tooltipbottom\">\n                  &nbsp;[?]\n                  <span className=\"tooltiptextbottom\">The fields in this section were directly taken from\n                  the archival information produced by the Library of Congress.</span>\n                </div>\n              </span><br/>\n              <p className=\"archinfo\"><b>Title:</b> {this.state.data.title}</p>\n              <p className=\"archinfo\"><b>Date:</b> {this.state.data.sort_date}</p>\n              <p className=\"archinfo\"><b>Collection:</b> <a href={c_link} target=\"_blank\" rel=\"noopener noreferrer\">{c_name}</a></p>\n              <p className=\"archinfo\"><b>Library of Congress:</b> <a href={this.state.data.url} target=\"_blank\" rel=\"noopener noreferrer\">{this.state.data.filename}</a></p>\n              <hr/>\n              <span><b><u>COMPUTER VISION ANNOTATIONS</u></b>\n                <div className=\"tooltip\">\n                  &nbsp;[?]\n                  <span className=\"tooltiptext\">The information below was created automatically\n                  by the application of computer vision algorithms. See each element for more information\n                  about each alogorithm.</span>\n                </div>\n              </span><br/>\n              <div className=\"inputcont-outer\">\n                <div className=\"inputcont\">\n                  <input\n                    type='range'\n                    min=\"0\"\n                    max=\"100\"\n                    step=\"1\"\n                    value={this.state.opacity}\n                    onChange={this.handleOpacityChange.bind(this)}/>\n                  <b>&#8592; Opacity </b>\n                  <div className=\"tooltipright\">\n                    &nbsp;[?]\n                    <span className=\"tooltiptextright\">Slider to fade the image to highlight the annotations.</span>\n                  </div>\n                </div>\n                <div className=\"inputcont\">\n                <input\n                  type='range'\n                  min=\"0\"\n                  max=\"100\"\n                  step=\"1\"\n                  value={this.state.conf}\n                  onChange={this.handleConfChange.bind(this)}/>\n                  <b>&#8592; Confidence</b>\n                  <div className=\"tooltipright\">\n                    &nbsp;[?]\n                    <span className=\"tooltiptextright\">Each annotation has a confidence score attached to it. Slide\n                    to the left to include less confident annotations and to the right to include only those\n                    annotations with a high confidence score.</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"anno-button-box\">\n                <b>Annotation &#8594;</b>\n                <button\n                  className={\"anno-button tooltip \" + (this.state.dtype === \"none\" ? \" anno-button-active\" : \"\")}\n                  onClick={() => this.handleSelectDataType(\"none\")}>None\n                  <span className=\"tooltiptext\">Clear annotations.</span>\n                  </button>\n                <button\n                  className={\"anno-button tooltip \" + (this.state.dtype === \"face\" ? \" anno-button-active\" : \"\")}\n                  onClick={() => this.handleSelectDataType(\"face\")}>Faces\n                  <span className=\"tooltiptext\">Draw boxes around detected faces.</span>\n                  </button>\n                <button\n                  className={\"anno-button tooltip \" + (this.state.dtype === \"inst\" ? \" anno-button-active\" : \"\")}\n                  onClick={() => this.handleSelectDataType(\"inst\")}> Objects\n                  <span className=\"tooltiptext\">Draw boxes around detected objects and people.</span>\n                  </button>\n                <button\n                  className={\"anno-button tooltip \" + (this.state.dtype === \"lvic\" ? \" anno-button-active\" : \"\")}\n                  onClick={() => this.handleSelectDataType(\"lvic\")}>LVIS\n                  <span className=\"tooltiptext\">Draw boxes around detected objects; uses a larger set of\n                  object types than the Objects annotations.</span>\n                  </button>\n                <button\n                  className={\"anno-button tooltipright \" + (this.state.dtype === \"kpnt\" ? \" anno-button-active\" : \"\")}\n                  onClick={() => this.handleSelectDataType(\"kpnt\")}>Pose\n                  <span className=\"tooltiptextright\">Show the limbs and body of detected people.</span>\n                  </button>\n              </div>\n              <div className=\"pano-bars-outer\">\n                <div className=\"pano-bars-title\">\n                  <b>Panoptic Segmentation</b>\n                  <div className=\"tooltip\">\n                    &nbsp;[?]\n                    <span className=\"tooltiptext\">Detected regions in the image, by percentage of the entire image. Stuff is in yellow; objects are in green.</span>\n                  </div>\n                </div>\n                <div className=\"pano-bars-inner\">\n                  {pano}\n                </div>\n              </div>\n            </div>\n            <div className=\"recs\">\n              <span>Similar Photographs\n                <div className=\"tooltip\">\n                  &nbsp;[?]\n                  <span className=\"tooltiptext\">Ten images that have some visual similarity\n                  to the starting image based on the image embedding method.</span>\n                </div>\n              </span>\n              <div className=\"flex-container\">\n               {nn_recs}\n              </div>\n              <span>Other Recommendations\n                <div className=\"tooltip\">\n                  &nbsp;[?]\n                  <span className=\"tooltiptext\">Five randomly selected images from the collection to show\n                  other possibilities.</span>\n                </div>\n              </span>\n              <div className=\"flex-container\">\n                {rr_recs}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport { ImgBox };\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route\n} from \"react-router-dom\";\n\nimport { ImgBox } from \"./components/imgbox.js\";\n\nimport './reset.css';\nimport './App.css';\n\nclass ImageViewer extends React.Component {\n\n  render() {\n    return (\n      <ImgBox location={this.props.location}/>\n    );\n  }\n}\n\n// ***************************************************************************\n// Wrap the App and return the rendered Viewer\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Route component={ImageViewer} />\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}